{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Game.js"],"names":["cc","Class","extends","Component","properties","level","floodPrefab","default","type","Prefab","canvas","Node","move_display","Label","scoreAudio","AudioClip","spawnInterval","onLoad","spawnCount","name","rows","limit","initialize","create_table","score","finished","game_level","change_level","numberToSpawn","start_table","colours","Color","BLUE","RED","GREEN","YELLOW","ORANGE","MAGENTA","row","game_table","col","colour","flooded","element","num","limit_moves","level_name","moves","updateMoves","random_colour","colour_no","Math","floor","random","flood_element","color","flood_neighbours","test_colour_flood","equals","all_flooded","flood","initial","old_colour","max_moves","log","star","spawnNewStarByNum","spawnAllStars","i","j","inum","newcolour","newStar","instantiate","node","addChild","starWidth","width","marginX","marginy","height","x","ynum","y","pos","v2","setPosition","getComponent","game","spawnNewStar","getNewStarPosition","parseInt","new_game","string","gainScore","gameOver","director","loadScene"],"mappings":"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","file":"Game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        level:[],\n        floodPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        canvas: {\n            default: null,\n            type: cc.Node\n        },              \n        move_display: {\n            default: null,\n            type: cc.Label\n        },       \n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n        spawnInterval: 0,\n        // rows: 0\n    },\n\n    onLoad: function () { \n        \n        this.spawnCount = 0;       \n        this.level = \n        [\n            {\n                name: \"Normal\",\n                rows:10,\n                limit: 18\n            },\n            {\n                name: \"Hard\",\n                rows:12,\n                limit: 24\n            },\n            {\n                name: \"Hell\",\n                rows:18,\n                limit: 31\n            },\n            {\n                name: \"Extreme\",\n                rows:24,\n                limit: 41\n            }\n        ];\n        this.initialize();\n        this.create_table();\n        \n        this.score = 0;\n    },\n\n    initialize: function()\n    {\n        this.finished = false;\n        this.game_level = 0;\n        this.change_level(this.game_level);\n        this.numberToSpawn = this.rows * this.rows;\n        \n        this.start_table = {};\n\n        this.colours = [cc.Color.BLUE, cc.Color.RED,cc.Color.GREEN,cc.Color.YELLOW,cc.Color.ORANGE,cc.Color.MAGENTA];\n        for (var row = 0; row < this.rows; row++) {            \n            this.start_table[row] = {};            \n        }  \n\n        this.game_table = {};\n        for (var row = 0; row < this.rows; row++) {\n            this.game_table[row] = {};\n            for (var col = 0; col < this.rows; col++) {\n                this.game_table[row][col] = {\n                    colour: null,\n                    flooded: false,\n                    element: null\n                };\n            }\n        }        \n    },\n\n    change_level: function (num)\n    {\n        this.game_level = num;\n        this.rows = this.level[num].rows;\n        this.limit_moves = this.level[num].limit;\n        this.level_name = this.level[num].name;\n        this.moves = 0;\n        this.updateMoves();\n        // this.create_table();       \n    },\n\n    random_colour: function  ()\n    {        \n        var colour_no = Math.floor (Math.random () * 6);\n        return this.colours[colour_no];\n    },    \n\n    flood_element: function (row, col, colour)\n    {\n        this.game_table[row][col].colour = colour;\n        this.game_table[row][col].element.color = colour;\n    },\n\n    flood_neighbours: function  (row, col, colour)\n    {\n        if (row < this.rows - 1)\n        this.test_colour_flood (row + 1, col, colour);\n        if (row > 0)\n        this.test_colour_flood (row - 1, col, colour);\n        if (col < this.rows - 1)\n        this.test_colour_flood (row, col + 1, colour);\n        if (col > 0)\n        this.test_colour_flood (row, col - 1, colour);\n    },\n\n    test_colour_flood: function  (row, col, colour)\n    {\n        if (this.game_table[row][col].flooded)\n            return;\n        if (this.game_table[row][col].colour.equals(colour)) {\n            this.game_table[row][col].flooded = true;\n            this.flood_neighbours (row, col, colour);\n        }\n    },\n\n    all_flooded: function  ()\n    {\n        for (var row = 0; row < this.rows; row++) {\n            for (var col = 0; col < this.rows; col++) {\n                if (! this.game_table[row][col].flooded) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    flood: function(colour, initial)\n    {\n        if (this.finished)\n            return;\n        var old_colour = this.game_table[0][0].colour;\n        if (! initial && colour == old_colour)\n            return;\n        this.moves++;        \n        \n        for (var row = 0; row < this.rows; row++) \n            for (var col = 0; col < this.rows; col++) \n            {\n                if (this.game_table[row][col].flooded)\n                 {\n                    this.flood_element (row, col, colour);                    \n                 } \n            }      \n        for (var row = 0; row < this.rows; row++)\n            for (var col = 0; col < this.rows; col++)\n                if (this.game_table[row][col].flooded)\n                {\n                    this.flood_neighbours (row, col, colour);\n                }    \n        if (this.all_flooded ()) {\n            this.finished = true;\n            if (this.moves <= this.max_moves) {\n                cc.log (\"You win.\");\n            } else {\n                cc.log (\"Finished, at last!\");\n            }\n        } else if (this.moves == this.max_moves) {\n            cc.log (\"You lost.\");\n        }\n    },\n\n    create_table: function()\n    {\n        this.moves = -1;\n        this.finished = false;        \n        for (var row = 0; row < this.rows; row++) {            \n            for (var col = 0; col < this.rows; col++) \n            {        \n                var colour = this.random_colour();\n                this.game_table[row][col].colour = colour;\n                this.start_table[row][col] = colour;\n                var star = this.spawnNewStarByNum(row, col, row, colour);                \n                this.game_table[row][col].element = star;\n                this.game_table[row][col].flooded = false;\n            }\n        }\n        this.game_table[0][0].flooded = true;\n        this.flood (this.game_table[0][0].colour, true);\n    },\n\n    spawnAllStars: function()\n    {         \n        for(var i = 0; i < this.rows; i++)\n            for(var j = 0; j <= i; j++)\n            {                 \n                var inum = i -j + 1;\n                this.spawnCount++;\n                this.spawnNewStarByNum(i, j, i -j + 1);                \n            }\n        for(var i = 1; i < this.rows; i++)\n            for(var j = i; j < this.rows; j++)\n            {   \n                var inum = this.rows -j + i;     \n                this.spawnCount++; \n                this.spawnNewStarByNum(i, j, this.rows - j + i);              \n            }\n    },\n\n    spawnNewStarByNum: function(i, j, inum, newcolour) {\n              \n        var newStar = cc.instantiate(this.floodPrefab);\n        var color = newStar.color;                \n        newStar.color = newcolour;\n        this.node.addChild(newStar); \n        var starWidth = newStar.width;\n        \n        var marginX = (this.canvas.width - starWidth * this.rows ) / 2;\n        var marginy = (this.canvas.height - starWidth * this.rows ) / 2;              \n\n        var x =  starWidth * inum - this.canvas.width / 2 + starWidth / 2 + marginX;\n        var ynum = (this.spawnCount - (this.spawnCount % this.rows)) * this.rows;\n        var y =  this.canvas.height / 2 - starWidth * j - starWidth / 2  - marginy + 50;\n        var pos = cc.v2( x , y);\n        newStar.setPosition(pos);       \n        \n        newStar.getComponent('Star').game = this;\n        return newStar;   \n    },\n\n    spawnNewStar: function() {\n\n        if (this.spawnCount >= this.numberToSpawn) {\n            return;\n        }\n       \n        var newStar = cc.instantiate(this.floodPrefab);\n        this.node.addChild(newStar);\n        \n        newStar.setPosition(this.getNewStarPosition(newStar.width));\n        //newStar.setPosition(cc.v2(newStar.getPosition().x + newStar.node.width * i, 0));        \n        newStar.getComponent('Star').game = this; \n        this.spawnCount++;\n    },\n\n    getNewStarPosition: function (starWidth) {\n        var marginX = (this.canvas.width - starWidth * this.numberToSpawn / this.rows ) / 2;\n        var marginy = (this.canvas.height - starWidth * this.numberToSpawn / this.rows ) / 2;\n        var x =  starWidth * (this.spawnCount % this.rows) - this.canvas.width / 2 + starWidth / 2 + marginX;\n        var ynum = (this.spawnCount - (this.spawnCount % this.rows)) * this.rows;\n        var y =  this.canvas.height / 2 - starWidth * parseInt(this.spawnCount / this.rows) - starWidth / 2  - marginy;\n        return cc.v2( x , y);\n    },\n\n    new_game: function()\n    {\n        this.create_table();\n    },\n\n    updateMoves: function () {                \n        this.move_display.string = this.moves + \" / \" + this.limit_moves; \n    },\n\n    gainScore: function () {\n        // this.score += 1;        \n        // this.scoreDisplay.string = this.score;        \n        // cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    gameOver: function () {\n        // this.player.stopAllActions(); \n        cc.director.loadScene('game');\n    }\n});\n"]}