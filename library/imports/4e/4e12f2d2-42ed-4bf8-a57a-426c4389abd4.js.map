{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Game.js"],"names":["cc","Class","extends","Component","properties","level","floodPrefab","default","type","Prefab","canvas","Node","move_display","Label","scoreAudio","AudioClip","mode_label","spawnInterval","onLoad","spawnCount","name","rows","limit","initialize","create_table","score","finished","game_level","change_level","colours","Color","BLUE","RED","GREEN","YELLOW","ORANGE","MAGENTA","reset_table","clear_node","row","col","game_table","element","destroy","numberToSpawn","start_table","colour","flooded","num","limit_moves","level_name","moves","updateMoves","string","random_colour","colour_no","Math","floor","random","flood_element","color","flood_neighbours","test_colour_flood","equals","all_flooded","flood","initial","old_colour","max_moves","log","star","spawnNewStarByNum","setSpawnCordinate","i","j","inum","newcolour","newStar","instantiate","node","addChild","marginX","marginy","starWidth","width","height","x","y","pos","v2","setPosition","getComponent","game","spawnNewStar","zIndex","getNewStarPosition","ynum","parseInt","new_game","gainScore","gameOver","director","loadScene"],"mappings":"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","file":"Game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        level:[],\r\n        floodPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        canvas: {\r\n            default: null,\r\n            type: cc.Node\r\n        },              \r\n        move_display: {\r\n            default: null,\r\n            type: cc.Label\r\n        },       \r\n        scoreAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n        mode_label: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        spawnInterval: 0,\r\n        // rows: 0\r\n    },\r\n\r\n    onLoad: function () { \r\n        \r\n        this.spawnCount = 0;       \r\n        this.level = \r\n        [\r\n            {\r\n                name: \"Normal\",\r\n                rows:10,\r\n                limit: 18\r\n            },\r\n            {\r\n                name: \"Hard\",\r\n                rows:12,\r\n                limit: 24\r\n            },\r\n            {\r\n                name: \"Hell\",\r\n                rows:18,\r\n                limit: 31\r\n            },\r\n            {\r\n                name: \"Extreme\",\r\n                rows:24,\r\n                limit: 41\r\n            }\r\n        ];\r\n        this.initialize();\r\n        this.create_table();\r\n        \r\n        this.score = 0;\r\n    },\r\n\r\n    initialize: function()\r\n    {\r\n        this.finished = false;\r\n        this.game_level = 0;\r\n        this.change_level(this.game_level);      \r\n\r\n        this.colours = [cc.Color.BLUE, cc.Color.RED,cc.Color.GREEN,cc.Color.YELLOW,cc.Color.ORANGE,cc.Color.MAGENTA];\r\n        this.reset_table();\r\n    },\r\n\r\n    clear_node: function()\r\n    {\r\n        for (var row = 0; row < this.rows; row++) {            \r\n            for (var col = 0; col < this.rows; col++) {\r\n                this.game_table[row][col].element.destroy();\r\n            }\r\n        }\r\n    },\r\n\r\n    reset_table: function()\r\n    {\r\n        this.numberToSpawn = this.rows * this.rows;        \r\n        this.start_table = {};        \r\n        for (var row = 0; row < this.rows; row++) {            \r\n            this.start_table[row] = {};            \r\n        }  \r\n\r\n        this.game_table = {};\r\n        for (var row = 0; row < this.rows; row++) {\r\n            this.game_table[row] = {};\r\n            for (var col = 0; col < this.rows; col++) {\r\n                this.game_table[row][col] = {\r\n                    colour: null,\r\n                    flooded: false,\r\n                    element: null\r\n                };\r\n            }\r\n        }\r\n    },\r\n\r\n    change_level: function (num)\r\n    {\r\n        // this.canvas.opacity = 255;\r\n        this.game_level = num;\r\n        this.rows = this.level[num].rows;\r\n        this.limit_moves = this.level[num].limit;\r\n        this.level_name = this.level[num].name;\r\n        this.moves = 0;\r\n        this.updateMoves();\r\n        this.mode_label.string = this.level_name;         \r\n        this.reset_table();       \r\n    },\r\n\r\n    random_colour: function  ()\r\n    {        \r\n        var colour_no = Math.floor (Math.random () * 6);\r\n        return this.colours[colour_no];\r\n    },    \r\n\r\n    flood_element: function (row, col, colour)\r\n    {\r\n        this.game_table[row][col].colour = colour;\r\n        this.game_table[row][col].element.color = colour;\r\n    },\r\n\r\n    flood_neighbours: function  (row, col, colour)\r\n    {\r\n        if (row < this.rows - 1)\r\n        this.test_colour_flood (row + 1, col, colour);\r\n        if (row > 0)\r\n        this.test_colour_flood (row - 1, col, colour);\r\n        if (col < this.rows - 1)\r\n        this.test_colour_flood (row, col + 1, colour);\r\n        if (col > 0)\r\n        this.test_colour_flood (row, col - 1, colour);\r\n    },\r\n\r\n    test_colour_flood: function  (row, col, colour)\r\n    {\r\n        if (this.game_table[row][col].flooded)\r\n            return;\r\n        if (this.game_table[row][col].colour.equals(colour)) {\r\n            this.game_table[row][col].flooded = true;\r\n            this.flood_neighbours (row, col, colour);\r\n        }\r\n    },\r\n\r\n    all_flooded: function  ()\r\n    {\r\n        for (var row = 0; row < this.rows; row++) {\r\n            for (var col = 0; col < this.rows; col++) {\r\n                if (! this.game_table[row][col].flooded) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    flood: function(colour, initial)\r\n    {\r\n        if (this.finished)\r\n            return;\r\n        var old_colour = this.game_table[0][0].colour;\r\n        if (! initial && colour == old_colour)\r\n            return;\r\n        this.moves++;        \r\n        \r\n        for (var row = 0; row < this.rows; row++) \r\n            for (var col = 0; col < this.rows; col++) \r\n            {\r\n                if (this.game_table[row][col].flooded)\r\n                 {\r\n                    this.flood_element (row, col, colour);                    \r\n                 } \r\n            }      \r\n        for (var row = 0; row < this.rows; row++)\r\n            for (var col = 0; col < this.rows; col++)\r\n                if (this.game_table[row][col].flooded)\r\n                {\r\n                    this.flood_neighbours (row, col, colour);\r\n                }    \r\n        if (this.all_flooded ()) {\r\n            this.finished = true;\r\n            if (this.moves <= this.max_moves) {\r\n                cc.log (\"You win.\");\r\n            } else {\r\n                cc.log (\"Finished, at last!\");\r\n            }\r\n        } else if (this.moves == this.max_moves) {\r\n            cc.log (\"You lost.\");\r\n        }\r\n    },\r\n\r\n    create_table: function()\r\n    {\r\n        this.moves = -1;\r\n        this.finished = false;        \r\n        for (var row = 0; row < this.rows; row++) {            \r\n            for (var col = 0; col < this.rows; col++) \r\n            {        \r\n                var colour = this.random_colour();\r\n                this.game_table[row][col].colour = colour;\r\n                // this.start_table[row][col] = colour;\r\n                var star = this.spawnNewStarByNum(row, col, row, colour);                \r\n                this.game_table[row][col].element = star;\r\n                this.game_table[row][col].flooded = false;\r\n            }\r\n        }\r\n        this.game_table[0][0].flooded = true;\r\n        this.flood (this.game_table[0][0].colour, true);\r\n    },\r\n\r\n    setSpawnCordinate: function()\r\n    {         \r\n        for(var i = 0; i < this.rows; i++)\r\n            for(var j = 0; j <= i; j++)\r\n            {                 \r\n                this.spawnCount++;\r\n                this.start_table[i][j] = i -j + 1;\r\n            }\r\n        for(var i = 1; i < this.rows; i++)\r\n            for(var j = i; j < this.rows; j++)\r\n            {   \r\n                var inum = this.rows -j + i;     \r\n                this.spawnCount++; \r\n                this.start_table[i][j] = this.rows -j + i;\r\n            }\r\n    },\r\n\r\n    spawnNewStarByNum: function(i, j, inum, newcolour) {\r\n              \r\n        var newStar = cc.instantiate(this.floodPrefab);\r\n        var color = newStar.color;                \r\n        newStar.color = newcolour;\r\n        this.node.addChild(newStar); \r\n\r\n        var marginX = 50;\r\n        var marginy = 200;\r\n        var starWidth = (this.canvas.width - 2 * marginX) / this.rows;\r\n        newStar.width = starWidth;\r\n        newStar.height = starWidth;      \r\n\r\n        var x =  starWidth * inum - this.canvas.width / 2 + starWidth / 2 + marginX;\r\n        var y =  this.canvas.height / 2 - starWidth * j  - marginy;\r\n        var pos = cc.v2( x , y);\r\n        newStar.setPosition(pos);       \r\n        \r\n        newStar.getComponent('Star').game = this;\r\n        return newStar;   \r\n    },\r\n\r\n    spawnNewStar: function() {\r\n\r\n        if (this.spawnCount >= this.numberToSpawn) {\r\n            return;\r\n        }\r\n       \r\n        var newStar = cc.instantiate(this.floodPrefab);\r\n        this.node.addChild(newStar);\r\n        newStar.zIndex = 3;\r\n        newStar.setPosition(this.getNewStarPosition(newStar.width));        \r\n        //newStar.setPosition(cc.v2(newStar.getPosition().x + newStar.node.width * i, 0));        \r\n        newStar.getComponent('Star').game = this; \r\n        this.spawnCount++;\r\n    },\r\n\r\n    getNewStarPosition: function (starWidth) {\r\n        var marginX = (this.canvas.width - starWidth * this.numberToSpawn / this.rows ) / 2;\r\n        var marginy = (this.canvas.height - starWidth * this.numberToSpawn / this.rows ) / 2;\r\n        var x =  starWidth * (this.spawnCount % this.rows) - this.canvas.width / 2 + starWidth / 2 + marginX;\r\n        var ynum = (this.spawnCount - (this.spawnCount % this.rows)) * this.rows;\r\n        var y =  this.canvas.height / 2 - starWidth * parseInt(this.spawnCount / this.rows) - starWidth / 2  - marginy;\r\n        return cc.v2( x , y);\r\n    },\r\n\r\n    new_game: function()\r\n    {\r\n        this.create_table();\r\n    },\r\n\r\n    updateMoves: function () {                \r\n        this.move_display.string = this.moves + \" / \" + this.limit_moves; \r\n    },\r\n\r\n    gainScore: function () {\r\n        // this.score += 1;        \r\n        // this.scoreDisplay.string = this.score;        \r\n        // cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n\r\n    gameOver: function () {\r\n        // this.player.stopAllActions(); \r\n        cc.director.loadScene('game');\r\n    }\r\n});\r\n"]}