{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Game.js"],"names":["cc","Class","extends","Component","properties","floodPrefab","default","type","Prefab","canvas","Node","player","move_display","Label","scoreAudio","AudioClip","spawnInterval","rows","onLoad","timer","spawnCount","numberToSpawn","initialize","create_table","score","finished","limit_moves","moves","start_table","colours","Color","BLUE","RED","GREEN","YELLOW","ORANGE","MAGENTA","row","game_table","col","colour","flooded","element","random_colour","colour_no","Math","floor","random","flood_element","color","flood_neighbours","test_colour_flood","equals","all_flooded","flood","initial","old_colour","max_moves","log","star","spawnNewStarByNum","spawnAllStars","i","j","inum","newcolour","newStar","instantiate","node","addChild","starWidth","width","marginX","marginy","height","x","ynum","y","pos","v2","setPosition","getComponent","game","spawnNewStar","getNewStarPosition","parseInt","update","dt","updateMoves","string","gainScore","gameOver","stopAllActions","director","loadScene"],"mappings":"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","file":"Game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n        floodPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        canvas: {\n            default: null,\n            type: cc.Node\n        },        \n        player: {\n            default: null,\n            type: cc.Node\n        },       \n        move_display: {\n            default: null,\n            type: cc.Label\n        },       \n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n        spawnInterval: 0,\n        rows: 0\n    },\n\n    onLoad: function () {        \n               \n        this.timer = 0; \n        this.spawnCount = 0;\n        this.numberToSpawn = this.rows * this.rows;\n        \n        this.initialize();\n        this.create_table();\n        \n        this.score = 0;\n    },\n\n    initialize: function()\n    {\n        this.finished = false;\n        this.limit_moves = 18;\n        this.moves = 0;\n        this.start_table = {};\n\n        this.colours = [cc.Color.BLUE, cc.Color.RED,cc.Color.GREEN,cc.Color.YELLOW,cc.Color.ORANGE,cc.Color.MAGENTA];\n        for (var row = 0; row < this.rows; row++) {            \n            this.start_table[row] = {};            \n        }  \n\n        this.game_table = {};\n        for (var row = 0; row < this.rows; row++) {\n            this.game_table[row] = {};\n            for (var col = 0; col < this.rows; col++) {\n                this.game_table[row][col] = {\n                    colour: null,\n                    flooded: false,\n                    element: null\n                };\n            }\n        }\n        \n    },\n\n    random_colour: function  ()\n    {        \n        var colour_no = Math.floor (Math.random () * 6);\n        return this.colours[colour_no];\n    },    \n\n    flood_element: function (row, col, colour)\n    {\n        this.game_table[row][col].colour = colour;\n        this.game_table[row][col].element.color = colour;\n    },\n\n    flood_neighbours: function  (row, col, colour)\n    {\n        if (row < this.rows - 1)\n        this.test_colour_flood (row + 1, col, colour);\n        if (row > 0)\n        this.test_colour_flood (row - 1, col, colour);\n        if (col < this.rows - 1)\n        this.test_colour_flood (row, col + 1, colour);\n        if (col > 0)\n        this.test_colour_flood (row, col - 1, colour);\n    },\n\n    test_colour_flood: function  (row, col, colour)\n    {\n        if (this.game_table[row][col].flooded)\n            return;\n        if (this.game_table[row][col].colour.equals(colour)) {\n            this.game_table[row][col].flooded = true;\n            this.flood_neighbours (row, col, colour);\n        }\n    },\n\n    all_flooded: function  ()\n    {\n        for (var row = 0; row < this.rows; row++) {\n            for (var col = 0; col < this.rows; col++) {\n                if (! this.game_table[row][col].flooded) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    flood: function(colour, initial)\n    {\n        if (this.finished)\n            return;\n        var old_colour = this.game_table[0][0].colour;\n        if (! initial && colour == old_colour)\n            return;\n        this.moves++;        \n        \n        for (var row = 0; row < this.rows; row++) \n            for (var col = 0; col < this.rows; col++) \n            {\n                if (this.game_table[row][col].flooded)\n                 {\n                    this.flood_element (row, col, colour);                    \n                 } \n            }      \n        for (var row = 0; row < this.rows; row++)\n            for (var col = 0; col < this.rows; col++)\n                if (this.game_table[row][col].flooded)\n                {\n                    this.flood_neighbours (row, col, colour);\n                }    \n        if (this.all_flooded ()) {\n            this.finished = true;\n            if (this.moves <= this.max_moves) {\n                cc.log (\"You win.\");\n            } else {\n                cc.log (\"Finished, at last!\");\n            }\n        } else if (this.moves == this.max_moves) {\n            cc.log (\"You lost.\");\n        }\n    },\n\n    create_table: function()\n    {\n        this.moves = -1;\n        this.finished = false;        \n        for (var row = 0; row < this.rows; row++) {            \n            for (var col = 0; col < this.rows; col++) \n            {        \n                var colour = this.random_colour();\n                this.game_table[row][col].colour = colour;\n                this.start_table[row][col] = colour;\n                var star = this.spawnNewStarByNum(row, col, row, colour);                \n                this.game_table[row][col].element = star;\n                this.game_table[row][col].flooded = false;\n            }\n        }\n        this.game_table[0][0].flooded = true;\n        this.flood (this.game_table[0][0].colour, true);\n    },\n\n    spawnAllStars: function()\n    {         \n        for(var i = 0; i < this.rows; i++)\n            for(var j = 0; j <= i; j++)\n            {                 \n                var inum = i -j + 1;\n                this.spawnCount++;\n                this.spawnNewStarByNum(i, j, i -j + 1);                \n            }\n        for(var i = 1; i < this.rows; i++)\n            for(var j = i; j < this.rows; j++)\n            {   \n                var inum = this.rows -j + i;     \n                this.spawnCount++; \n                this.spawnNewStarByNum(i, j, this.rows - j + i);              \n            }\n    },\n\n    spawnNewStarByNum: function(i, j, inum, newcolour) {\n              \n        var newStar = cc.instantiate(this.floodPrefab);\n        var color = newStar.color;                \n        newStar.color = newcolour;\n        this.node.addChild(newStar); \n        var starWidth = newStar.width;\n        \n        var marginX = (this.canvas.width - starWidth * this.rows ) / 2;\n        var marginy = (this.canvas.height - starWidth * this.rows ) / 2;              \n\n        var x =  starWidth * inum - this.canvas.width / 2 + starWidth / 2 + marginX;\n        var ynum = (this.spawnCount - (this.spawnCount % this.rows)) * this.rows;\n        var y =  this.canvas.height / 2 - starWidth * j - starWidth / 2  - marginy + 50;\n        var pos = cc.v2( x , y);\n        newStar.setPosition(pos);       \n        \n        newStar.getComponent('Star').game = this;\n        return newStar;   \n    },\n\n    spawnNewStar: function() {\n\n        if (this.spawnCount >= this.numberToSpawn) {\n            return;\n        }\n       \n        var newStar = cc.instantiate(this.floodPrefab);\n        this.node.addChild(newStar);\n        \n        newStar.setPosition(this.getNewStarPosition(newStar.width));\n        //newStar.setPosition(cc.v2(newStar.getPosition().x + newStar.node.width * i, 0));        \n        newStar.getComponent('Star').game = this;        \n        this.timer = 0;\n        this.spawnCount++;\n    },\n\n    getNewStarPosition: function (starWidth) {\n        var marginX = (this.canvas.width - starWidth * this.numberToSpawn / this.rows ) / 2;\n        var marginy = (this.canvas.height - starWidth * this.numberToSpawn / this.rows ) / 2;\n        var x =  starWidth * (this.spawnCount % this.rows) - this.canvas.width / 2 + starWidth / 2 + marginX;\n        var ynum = (this.spawnCount - (this.spawnCount % this.rows)) * this.rows;\n        var y =  this.canvas.height / 2 - starWidth * parseInt(this.spawnCount / this.rows) - starWidth / 2  - marginy;\n        return cc.v2( x , y);\n    },\n\n    update: function (dt) {      \n        this.timer += dt;\n    },\n\n    updateMoves: function () {                \n        this.move_display.string = this.moves + \" / \" + this.limit_moves; \n    },\n\n    gainScore: function () {\n        // this.score += 1;        \n        // this.scoreDisplay.string = this.score;        \n        // cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    gameOver: function () {\n        this.player.stopAllActions(); \n        cc.director.loadScene('game');\n    }\n});\n"]}